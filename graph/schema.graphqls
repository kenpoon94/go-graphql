
scalar Timestamp

type User {
  _id: String!
  name: String!
  jobtitle: String!
  age: Int!
  city: String!
  hobbies: [String]!
  accountId: String
  createdOn: String!
  updatedOn: String!
}

type Account {
  _id: String!
  email: String!
  password: String!
  userId: String!
  createdOn: String!
  updatedOn: String!
}

type Query {
  user(_id: String!): User
  users: [User]!
  account(_id: String!): Account
  accounts: [Account]!
}

input NewUser {
  name: String!
  jobtitle: String!
  age: Int!
  city: String!
  hobbies: [String]!
  accountId: String
  createdOn: String
  updatedOn: String
}

input UpdateUser {
  _id: String!
  name: String
  jobtitle: String
  age: Int
  city: String
  hobbies: [String]
  updatedOn: String
}

input NewAccount { 
  email: String!
  password: String!
  name: String!
  jobtitle: String!
  age: Int!
  city: String!
  hobbies: [String]!
  createdOn: String
  updatedOn: String
}

input UpdateAccount {
  _id: String!
  email: String
  password: String
  updatedOn: String
}

type Mutation {
  createAccount(input: NewAccount): Account!
  updateUser(input: UpdateUser): User!
  updateAccount(input: UpdateAccount): Account!
}